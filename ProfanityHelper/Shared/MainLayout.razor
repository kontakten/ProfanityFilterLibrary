@using System.IO
@inherits LayoutComponentBase
@inject ISnackbar Snackbar

<MudLayout>
    
    <MudAppBar Elevation="1" Color="Color.Primary" Fixed="false" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Link="https://github.com/kontakten" Color="Color.Inherit" Target="_blank" />
    </MudAppBar>  
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Nothing yet!</MudText>
        </MudDrawerHeader>
    </MudDrawer>
    <MudContainer Class="mt-16">
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Welcome to Profranity Helper !</MudText>
        <MudText Align="Align.Center">This will help you temper your language !</MudText>
        <InputFile id="fileInput" OnChange="UploadFile" hidden accept=".txt" />
        <MudButton HtmlTag="label"
               Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Filled.CloudUpload"
               for="fileInput">
        Upload File
    </MudButton>
        <MudGrid Class="mt-8">
            <MudItem xs="12" sm="6" md="6">
                <MudCard Elevation="25" Class="rounded-lg pb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5" Align="Align.Center">Unfiltered</MudText>
                            <MudTextField Placeholder="@UnfilteredSampleText" Lines="1" @bind-Value="OriginalText" Variant="Variant.Text" Immediate="true" OnKeyUp="@HandleText"></MudTextField>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="6">
                <MudCard Elevation="25" Class="rounded-lg pb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5" Align="Align.Center">Filtered</MudText>
                            <MudTextField Placeholder="@filteredSampleText" Lines="1" @bind-Value="ReplaceText" Variant="Variant.Text" Disabled="true"></MudTextField>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudPaper xs="12" sm="6" md="12">
                    <MudList Clickable="false">
                        <MudListItem Text="@("Amount of CurseWord: " + SumOfAllCurseWords.ToString())" />
                        <MudDivider />
                        @if(AmountOfCurseWords.Count > 0)
                        {
                            @foreach (var CurseWord in AmountOfCurseWords)
                            {
                                <MudListItem Text="@(CurseWord.Key + " " + CurseWord.Value)"  Icon="@Icons.Material.Filled.StarRate" />
                            }
                        }
                    </MudList>
                </MudPaper>
           </MudItem>
        </MudGrid>
    </MudContainer>
</MudLayout>

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@code {

    bool _drawerOpen = false;

    private static string OriginalText { get; set; }

    private static string ReplaceText { get; set; }

    private static int SumOfAllCurseWords { get; set; } = 0;

    private static IDictionary<string, int> AmountOfCurseWords { get; set; } = new Dictionary<string, int>();

    private static ProfanityFilterLibrary.IProfanityReaderService _textReaderService;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task HandleText()
    {
        _textReaderService = new ProfanityFilterLibrary.ProfanityTextReaderService(OriginalText);

        await _textReaderService.ValidateProfanity();
        ReplaceText = _textReaderService.TextReplacer.TextModel.ReplacedText;
        SumOfAllCurseWords = _textReaderService.TextReplacer.TextModel.SumOfAllCurseWords;
        AmountOfCurseWords = _textReaderService.TextReplacer.TextModel.AmountOfCurseWords;
    }

    async Task UploadFile(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 15;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if(e.File.ContentType != "text/plain")
        {
            Snackbar.Add($"Uploaded file format isnt supported. This file has the extension {e.File.Name.Split(".").Last()}", Severity.Warning);
            return;
        }

        var fileContent = new StreamContent(e.File.OpenReadStream(maxFileSize));
        
        using var responseStream = await fileContent.ReadAsStreamAsync();
        _textReaderService = new ProfanityFilterLibrary.ProfanityStreamReaderService(responseStream);
        
        await _textReaderService.ValidateProfanity();

        
        OriginalText = _textReaderService.TextReplacer.TextModel.OriginalText;
        ReplaceText = _textReaderService.TextReplacer.TextModel.ReplacedText;
        SumOfAllCurseWords = _textReaderService.TextReplacer.TextModel.SumOfAllCurseWords;
        AmountOfCurseWords = _textReaderService.TextReplacer.TextModel.AmountOfCurseWords;

        Snackbar.Add($"File Upload succes !", Severity.Success);
    }

    string UnfilteredSampleText = "Enter profanity right here you twat";
    string filteredSampleText = "Enter profanity right here you t**t";
}